import { resolve } from "node:path";
import { Case } from "change-case-all";
import type { OpenAPIV3_1 } from "openapi-types";
import { fileWriter } from "./io";

/**
 * Generates the main index.ts file with the primary API client class.
 * Creates a client class that instantiates all resource classes as properties.
 */
export async function generateIndex(
  spec: OpenAPIV3_1.Document,
  destDir: string,
) {
  const apiName = "SumUp";

  if (!spec.components) return;

  const outFile = resolve(destDir, "index.ts");
  const writer = fileWriter(outFile);

  writer.w(`
  // Code generated by @sumup/sumup-ts-codegen. DO NOT EDIT.
 
  import { HTTPClient } from './client'
  import type * as Core from './core'

  export type { APIConfig } from './client'
  `);
  const tags = spec.tags || [];
  tags.sort((a, b) => (a.name > b.name ? 1 : -1));
  for (const tag of tags) {
    const resourceName = Case.pascal(tag.name);
    writer.w(
      `import {${resourceName}} from './resources/${Case.kebab(tag.name)}'`,
    );
  }
  writer.w("");
  writer.w(`export class ${apiName} extends HTTPClient {`);
  for (const tag of tags) {
    const resourceName = Case.pascal(tag.name);
    writer.w(
      `${Case.camel(tag.name)}: ${resourceName} = new ${resourceName}(this);`,
    );
  }
  writer.w("");
  writer.w(`static ${apiName} = this;`);
  writer.w("}");
  writer.w("");
  for (const tag of tags) {
    const resourceName = Case.pascal(tag.name);
    writer.w(`${apiName}.${resourceName} = ${resourceName};`);
  }
  writer.w("");
  writer.w(`export declare namespace ${apiName} {`);
  writer.w("export type FetchParams = Core.FetchParams;\n");
  writer.w("export {");
  for (const tag of tags) {
    const resourceName = Case.pascal(tag.name);
    writer.w(`${resourceName},`);
  }
  writer.w("}");
  writer.w("}");
  writer.w("");
  writer.w(`export default ${apiName};`);

  await writer.flush();
}

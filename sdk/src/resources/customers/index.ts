// Code generated by @sumup/sumup-ts-codegen. DO NOT EDIT.

import * as Core from "../../core";

/**
 * Profile's personal address information.
 */
export type AddressLegacy = {
  /**
   * City name from the address.
   */
  city?: string;
  /**
   * Two letter country code formatted according to [ISO3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
   */
  country?: string;
  /**
   * First line of the address with details of the street name and number.
   */
  line_1?: string;
  /**
   * Second line of the address with details of the building, unit, apartment, and floor numbers.
   */
  line_2?: string;
  /**
   * Postal code from the address.
   */
  postal_code?: string;
  /**
   * State name or abbreviation from the address.
   */
  state?: string;
};

/**
 * Created mandate
 */
export type MandateResponse = {
  /**
   * Indicates the mandate type
   */
  type?: string;
  /**
   * Mandate status
   */
  status?: string;
  /**
   * Merchant code which has the mandate
   */
  merchant_code?: string;
};

/**
 * Personal details for the customer.
 */
export type PersonalDetails = {
  /**
   * First name of the customer.
   */
  first_name?: string;
  /**
   * Last name of the customer.
   */
  last_name?: string;
  /**
   * Email address of the customer.
   */
  email?: string;
  /**
   * Phone number of the customer.
   */
  phone?: string;
  /**
   * Date of birth of the customer.
   */
  birth_date?: string;
  /**
   * An identification number user for tax purposes (e.g. CPF)
   */
  tax_id?: string;
  address?: AddressLegacy;
};

/**
 * Customer
 */
export type Customer = {
  /**
   * Unique ID of the customer.
   */
  customer_id: string;
  personal_details?: PersonalDetails;
};

/**
 * Error message for forbidden requests.
 */
export type ErrorForbidden = {
  /**
   * Short description of the error.
   */
  error_message?: string;
  /**
   * Platform code for the error.
   */
  error_code?: string;
  /**
   * HTTP status code for the error.
   */
  status_code?: string;
};

/**
 * Payment Instrument Response
 */
export type PaymentInstrumentResponse = {
  /**
   * Unique token identifying the saved payment card for a customer.
   */
  token?: string;
  /**
   * Indicates whether the payment instrument is active and can be used for payments. To deactivate it, send a `DELETE` request to the resource endpoint.
   */
  active?: boolean;
  /**
   * Type of the payment instrument.
   */
  type?: "card";
  /**
   * Details of the payment card.
   */
  card?: {
    /**
     * Last 4 digits of the payment card number.
     */
    last_4_digits?: string;
    /**
     * Issuing card network of the payment card.
     */
    type?:
      | "AMEX"
      | "CUP"
      | "DINERS"
      | "DISCOVER"
      | "ELO"
      | "ELV"
      | "HIPERCARD"
      | "JCB"
      | "MAESTRO"
      | "MASTERCARD"
      | "VISA"
      | "VISA_ELECTRON"
      | "VISA_VPAY"
      | "UNKNOWN";
  };
  mandate?: MandateResponse;
  /**
   * Creation date of payment instrument. Response format expressed according to [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) code.
   */
  created_at?: string;
};

export type UpdateCustomerParams = { personal_details?: PersonalDetails };

export type ListPaymentInstrumentsResponse = PaymentInstrumentResponse[];

export class Customers extends Core.APIResource {
  /**
   * Creates a new saved customer resource which you can later manipulate and save payment instruments to.
   */
  create(
    body?: Customer,
    params?: Core.FetchParams,
  ): Core.APIPromise<Customer> {
    return this._client.post<Customer>({
      path: `/v0.1/customers`,
      body,
      ...params,
    });
  }

  /**
   * Retrieves an identified saved customer resource through the unique `customer_id` parameter, generated upon customer creation.
   */
  get(
    customerId: string,
    params?: Core.FetchParams,
  ): Core.APIPromise<Customer> {
    return this._client.get<Customer>({
      path: `/v0.1/customers/${customerId}`,
      ...params,
    });
  }

  /**
   * Updates an identified saved customer resource's personal details.
   *
   * The request only overwrites the parameters included in the request, all other parameters will remain with their initially assigned values.
   *
   */
  update(
    customerId: string,
    body?: UpdateCustomerParams,
    params?: Core.FetchParams,
  ): Core.APIPromise<Customer> {
    return this._client.put<Customer>({
      path: `/v0.1/customers/${customerId}`,
      body,
      ...params,
    });
  }

  /**
   * Lists all payment instrument resources that are saved for an identified customer.
   */
  listPaymentInstruments(
    customerId: string,
    params?: Core.FetchParams,
  ): Core.APIPromise<PaymentInstrumentResponse[]> {
    return this._client.get<PaymentInstrumentResponse[]>({
      path: `/v0.1/customers/${customerId}/payment-instruments`,
      ...params,
    });
  }

  /**
   * Deactivates an identified card payment instrument resource for a customer.
   */
  deactivatePaymentInstrument(
    customerId: string,
    token: string,
    params?: Core.FetchParams,
  ): Core.APIPromise<void> {
    return this._client.delete<void>({
      path: `/v0.1/customers/${customerId}/payment-instruments/${token}`,
      ...params,
    });
  }
}

export declare namespace Customers {
  export type {
    AddressLegacy,
    Customer,
    ErrorForbidden,
    MandateResponse,
    PaymentInstrumentResponse,
    PersonalDetails,
    UpdateCustomerParams,
  };
}

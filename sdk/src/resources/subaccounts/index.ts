// Code generated by @sumup/sumup-ts-codegen. DO NOT EDIT.

import * as Core from "../../core";

/**
 * Permissions assigned to an operator or user.
 */
export type Permissions = {
  create_moto_payments: boolean;
  create_referral: boolean;
  full_transaction_history_view: boolean;
  refund_transactions: boolean;
  admin: boolean;
};

/**
 * Operator account for a merchant.
 */
export type Operator = {
  id: number;
  username: string;
  nickname?: string | null;
  disabled: boolean;
  /**
   * The timestamp of when the operator was created.
   */
  created_at: string;
  /**
   * The timestamp of when the operator was last updated.
   */
  updated_at: string;
  permissions: Permissions;
  account_type: "operator" | "normal";
};

/**
 * Error object for compat API calls.
 */
export type CompatError = { error_code: string; message: string };

export type ListSubAccountsQueryParams = {
  query?: string;
  include_primary?: boolean;
};

export type ListSubAccountsResponse = Operator[];

export type CreateSubAccountParams = {
  username: string;
  password: string;
  nickname?: string;
  permissions?: {
    create_moto_payments?: boolean;
    create_referral?: boolean;
    full_transaction_history_view?: boolean;
    refund_transactions?: boolean;
  };
};

export type UpdateSubAccountParams = {
  password?: string;
  username?: string;
  disabled?: boolean;
  nickname?: string;
  permissions?: {
    create_moto_payments?: boolean;
    create_referral?: boolean;
    full_transaction_history_view?: boolean;
    refund_transactions?: boolean;
  };
};

export class Subaccounts extends Core.APIResource {
  /**
   * Returns list of operators for currently authorized user's merchant.
   */
  listSubAccounts(
    query?: ListSubAccountsQueryParams,
    params?: Core.FetchParams,
  ): Core.APIPromise<Operator[]> {
    return this._client.get<Operator[]>({
      path: `/v0.1/me/accounts`,
      query,
      ...params,
    });
  }

  /**
   * Creates new operator for currently authorized users' merchant.
   */
  createSubAccount(
    body: CreateSubAccountParams,
    params?: Core.FetchParams,
  ): Core.APIPromise<Operator> {
    return this._client.post<Operator>({
      path: `/v0.1/me/accounts`,
      body,
      ...params,
    });
  }

  /**
   * Returns specific operator.
   */
  compatGetOperator(
    operatorId: number,
    params?: Core.FetchParams,
  ): Core.APIPromise<Operator> {
    return this._client.get<Operator>({
      path: `/v0.1/me/accounts/${operatorId}`,
      ...params,
    });
  }

  /**
   * Updates operator. If the operator was disabled and their password is updated they will be unblocked.
   */
  updateSubAccount(
    operatorId: number,
    body: UpdateSubAccountParams,
    params?: Core.FetchParams,
  ): Core.APIPromise<Operator> {
    return this._client.put<Operator>({
      path: `/v0.1/me/accounts/${operatorId}`,
      body,
      ...params,
    });
  }

  /**
   * Disable the specified operator for the merchant account.
   */
  deactivateSubAccount(
    operatorId: number,
    params?: Core.FetchParams,
  ): Core.APIPromise<Operator> {
    return this._client.delete<Operator>({
      path: `/v0.1/me/accounts/${operatorId}`,
      ...params,
    });
  }
}

export declare namespace Subaccounts {
  export type {
    CompatError,
    CreateSubAccountParams,
    ListSubAccountsQueryParams,
    Operator,
    Permissions,
    UpdateSubAccountParams,
  };
}

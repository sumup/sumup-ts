// Code generated by @sumup/ts-sdk-gen@0.0.1. DO NOT EDIT.

import * as Core from "../../core";

/**
 * Authorization token flow
 */
export type AuthToken = {
  /**
   * The client ID of your application that was generated when you [registered it](https://developer.sumup.com/docs/register-app).
   */
  client_id: string;
  /**
   * The client secret of your application that was generated when you [registered it](https://developer.sumup.com/docs/register-app).
   */
  client_secret: string;
  /**
   * The authorization code that you received from requesting an authorization code.
   */
  code: string;
  /**
   * The grant type used for obtaining an access token.
   */
  grant_type: "authorization_code" | "refresh_token";
  /**
   * A **required** parameter when generating a refresh token.
   */
  refresh_token?: string;
};

export type AuthorizeQueryParams = {
  responseType?: string;
  clientId?: string;
  redirectUri?: string;
  scope?: string;
  state?: string;
};

export type AuthorizeResponse = Record<string, unknown>;

export type CreateTokenResponse = {
  /**
   * The access token that you need to use in your requests to the SumUp API.
   */
  access_token?: string;
  /**
   * The validity of the access token in seconds.
   */
  expires_in?: number;
  /**
   * The refresh token provided in the request call
   */
  refresh_token?: string;
  /**
   * List of authorization scopes granted to your access token.
   */
  scope?: string;
  /**
   * The type of the token. The value is always `Bearer`.
   */
  token_type?: string;
};

export class Authorization extends Core.APIResource {
  /**
   * Request authorization from users
   */
  authorize(
    query?: AuthorizeQueryParams,
    params?: Core.FetchParams,
  ): Core.APIPromise<void> {
    return this._client.get<void>({
      path: `/authorize`,
      query,
      ...params,
    });
  }

  /**
   * Generate a token
   */
  createToken(
    body: AuthToken,
    params?: Core.FetchParams,
  ): Core.APIPromise<void> {
    return this._client.post<void>({
      path: `/token`,
      body,
      ...params,
    });
  }
}

export declare namespace Authorization {
  export type { AuthToken, AuthorizeQueryParams };
}

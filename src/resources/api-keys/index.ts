// Code generated by @sumup/ts-sdk-gen@0.0.1. DO NOT EDIT.

import * as Core from "../../core";

export type OAuth2Scopes = (
  | "accounting.read"
  | "accounting.write"
  | "email"
  | "invoices.read"
  | "invoices.write"
  | "payment_instruments"
  | "payments"
  | "products"
  | "profile"
  | "readers.read"
  | "readers.write"
  | "transactions.history"
  | "user.app-settings"
  | "user.payout-settings"
  | "user.profile"
  | "user.profile_readonly"
  | "user.subaccounts"
)[];

/**
 * API Key
 *
 * An API key is a static token that allows you to authorize with SumUp APIs.
 * Keep your API keys secret and safe. Do not share your API keys or expose them in a publicly accessible areas such as client-side code (browser or apps) or in the GitHub.
 */
export type APIKey = {
  /**
   * Unique identifier of the API Key.
   */
  id: string;
  /**
   * User-assigned name of the API Key.
   */
  name: string;
  scopes: OAuth2Scopes;
  type: "public" | "secret";
  /**
   * The plaintext value of the API key. This field is returned only in the response to API key creation and is never again available in the plaintext form.
   */
  plaintext?: string;
  /**
   * Last 8 characters of the API key.
   */
  preview: string;
  /**
   * The timestamp of when the API key was created.
   */
  created_at: string;
  /**
   * The timestamp of when the API key was last updated.
   */
  updated_at: string;
};

/**
 * List of API keys.
 */
export type APIKeysList = {
  /**
   * List of API keys.
   */
  items: APIKey[];
  /**
   * Total number of API keys.
   */
  total_count: number;
};

export type ListApiKeysQueryParams = {
  offset?: number;
  limit?: number;
};

export type CreateApiKeyParams = {
  /**
   * Name of the API key.
   */
  name: string;
  scopes: OAuth2Scopes;
};

export type UpdateApiKeyParams = {
  /**
   * New name for the API key.
   */
  name: string;
  scopes: OAuth2Scopes;
};

export class ApiKeys extends Core.APIResource {
  /**
   * List API keys
   */
  list(
    merchantCode: string,
    query?: ListApiKeysQueryParams,
    params?: Core.FetchParams,
  ): Core.APIPromise<APIKeysList> {
    return this._client.get<APIKeysList>({
      path: `/v0.1/merchants/${merchantCode}/api-keys`,
      query,
      ...params,
    });
  }

  /**
   * Create an API key
   */
  create(
    merchantCode: string,
    body: CreateApiKeyParams,
    params?: Core.FetchParams,
  ): Core.APIPromise<APIKey> {
    return this._client.post<APIKey>({
      path: `/v0.1/merchants/${merchantCode}/api-keys`,
      body,
      ...params,
    });
  }

  /**
   * Retrieve an API Key
   */
  get(
    merchantCode: string,
    keyId: string,
    params?: Core.FetchParams,
  ): Core.APIPromise<APIKey> {
    return this._client.get<APIKey>({
      path: `/v0.1/merchants/${merchantCode}/api-keys/${keyId}`,
      ...params,
    });
  }

  /**
   * Update an API key
   */
  update(
    merchantCode: string,
    keyId: string,
    body: UpdateApiKeyParams,
    params?: Core.FetchParams,
  ): Core.APIPromise<void> {
    return this._client.put<void>({
      path: `/v0.1/merchants/${merchantCode}/api-keys/${keyId}`,
      body,
      ...params,
    });
  }

  /**
   * Delete an API key
   */
  delete(
    merchantCode: string,
    keyId: string,
    params?: Core.FetchParams,
  ): Core.APIPromise<void> {
    return this._client.delete<void>({
      path: `/v0.1/merchants/${merchantCode}/api-keys/${keyId}`,
      ...params,
    });
  }
}

export declare namespace ApiKeys {
  export type {
    APIKey,
    APIKeysList,
    CreateApiKeyParams,
    ListApiKeysQueryParams,
    OAuth2Scopes,
    UpdateApiKeyParams,
  };
}
